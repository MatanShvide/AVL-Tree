הנחיות לבודק שפיות:

חלק ראשון
*הקוד מרכיב שני עצים בגודל אקראי בין 1-100 כאשר המפתחות של הראשון נמוכים מ500 והמפתחות של השני גבוהים ממנו. המפתחות נכנסים ללא חזרות.
*הקוד מרכיב את העץ ומדפיס את סדר ההכנסות כדי שתוכלו להרכיב בעצמכם אם תרצו לבדוק עץ ספציפי. בנוסף, הוא מדפיס את הסדר InOrder כדי שתוכלו לוודא שהכל נכנס\
*עבור כל עץ הוא עובר על כל הצמתים InOrder ובודק BalanceFactor, קישוריות, תקינות דרגה ויחסי גודל עם הבנים שלו וההורה שלו. במידה ויש בעיית סדר הוא מפרד באיזה אינדקס InOrder התקלה, במידה ויש בעיית קישוריות הוא מפרט את המפתח ואת בניו, במידה ויש בעיית BF הוא מדווח מפתח,דרגה,בנים ודרגותיהם.

חלק שני
*הקוד יחבר בין שני העצים בעזרת המפתח 500 ויבצע את אותן הבדיקות שביצע קודם לכן, הפעם עבור העץ המחובר. כמו כן, יוודא שכל המפתחות נכנסו.
חלק שלישי
*נמחק 5 מפתחות קבועים מתוך מיקומם ברשימת הInOrder של העץ(אתם יכולים לשנות חלק זה על פי רצונכם, ייתכנו תקלות ריצה אם במקרה העץ שיצא לא תומך במספרי האינדקסים הקבועים שכתבתי) ומדפיס את המפתחות InOrder ומדווח על גודל העץ החדש ומבצע את אותן הבדיקות שביצע על העצים הקודמים.
חלק רביעי
*נפצל את העץ על פי האיבר ה12 ברשימת הInOrder (נבחר באקראיות, אתם יכולים לשנות את זה) ונבצע את אותן הבדיקות על שני העצים החדשים וידפיס אותם InOrder ויוודא שהגדלים תקינים.


הערות חשובות
*בקוד ישנם חלקים שלמים שנמצאים בהערות \\. הסיבה לכך היא שלעתים קשה לבדוק את הפקודות כשכל פעם מקבלים עץ אחר. לכן ישנן פקודות מוקפאות לtree3 שנועד לבנות עץ קבוע ואפשר להשתמש בו לטובת כל הבדיקות ולהשתיק את השאר. יש לו משתנה גודל, פקודת אתחול, רשימת הכנסות,רשימת bank למניעת הכנסות חוזרות, רשימת הכנסות InOrder,  לולאת for של הכנסות ולבסוף קטע שלם של בדיקות עבורו. אחר כך, ניתן להקפיא את העצים האחרים ולבצע פקודת split ולשנות את המשתנים באגף ההוא כך שהפונקציה תפעל על העץ הרלוונטי. השתדלתי שזה יהיה כמה שיותר מובן
*הקוד לא בודק את כל הפונקציות שלכן. הוא בודק את תקינות העץ בלבד ולא אם החזרתם את מספר הפעולות הנכון וכו. חוץ מזה חשוב לי להדגיש שאני סתם סטודנט בינוני ולכן אין שום ערובה לשום דבר. הקוד הזה עזר לי מאד ואני מקווה שיעזור גם לכם
*יכולות להיות כל מיני תקלות ריצה שקשורות באינדקסים וגדלי עצים, בעיקר באגף הsplit והdelete שם בחרתי אינדקסים קבועים ללא קשר לעץ. שימו לב לזה ושנו בהתאם.
*ישנו פלט מאד ברור עבור שגיאות במבנה העץ, כל תקלות ריצה קשורות לjava ולא לקוד עצמו. אם יש תקלות בפונקציות ברמת הריצה, הקוד פשוט ירוץ ולא יידע להגיד מה הבעיה או אפילו לרמוז. זה רק בודק תקינות מבנה של עץ.
*ישנן שתי פונקציות עזר שיש לשלב במחלקות שלכם:
פונקציית הוצאת BalanceFactor, יש להניח אותם אצלכם בAVLNode:
private int getBF() {
			if (this.rank == -1) {
				return -3;
			}
			return this.left.rank - this.right.rank;
		}
פונקציית הבדיקה, יש להניח אותה אצלכם בAVLTree:
	public void print(AVLNode node, int level) { /////aux tester func
		if (node == null) {
			return;
		}
		//System.out.println("Level: " + level + " , " + node.getKey() + " , " + node.getValue());
		if ((node.key != -1) && ((node.getBF() >= 2) || (node.getBF() <= -2))) {
			System.out.println("node" + node.key + " is unbalanced. BF is " + node.getBF() + ". sons are "
					+ node.left.key + " rank=" + node.left.rank + " " + node.right.key + " rank=" + node.right.rank
					+ "*********");
		} else if (((node.right != null) && (node.right.key < node.key) && (node.right.key != -1))
				|| ((node.left != null) && (node.left.key > node.key) && (node.left.key != -1))) {
			System.out.println("node" + node.key + "is not in order********");
		} else if ((node.rank == -1) && ((node.right != null) || (node.left != null))) {
			System.out.println("virtual son of" + node.parent.key + " has a son*********");
		} else if ((node.right != null) && (node.right.parent != node)
				|| ((node.left != null) && (node.left.parent != node))) {
			System.out.println("one of" + node.key + "sons is not connected to him*********");
		} else if ((node.parent != null) && (node.parent.right != node) && (node.parent.left != node)) {
			System.out.println("node" + node.key + " is not connected to parent********");
		} else if ((node.rank != -1) && (node.rank != (Math.max(node.left.rank, node.right.rank) + 1))) {
			System.out.println("node" + node.key + " rank is not adjusted, his rank is" + node.rank);
			System.out.println("sons are" + node.left.key + " rank " + node.left.rank + " and " + node.right.key
					+ " rank " + node.right.rank);
		}

		if (node.getLeft() != null)
			print((AVLNode) (node.getLeft()), level + 1);
		if (node.getRight() != null)
			print((AVLNode) node.getRight(), level + 1);
	}
